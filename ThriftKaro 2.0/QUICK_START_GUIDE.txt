===============================================
THRIFTKARO QUICK START GUIDE
===============================================

This guide will help you start and verify the ThriftKaro microservices project.

===============================================
PREREQUISITES
===============================================

✓ Java 11 or higher installed
✓ Maven installed
✓ Node.js and npm installed (for frontend)
✓ MongoDB Atlas account (already configured)
✓ Internet connection (for MongoDB Atlas)

===============================================
STEP 1: START MICROSERVICES
===============================================

Open PowerShell/Command Prompt and navigate to:
cd "ThriftKaro 2.0"

Run the startup script:
start-services.bat

This will start all services in order:
1. Eureka Server (Service Discovery) - Wait 15 seconds
2. Config Server - Wait 10 seconds
3. API Gateway - Wait 10 seconds
4. User Service - Wait 10 seconds
5. Product Service - Wait 10 seconds
6. Cart Service - Wait 10 seconds
7. Order Service - Wait 10 seconds
8. Shop Service - Wait 10 seconds
9. Payment Service - Wait 10 seconds
10. Chat Service - Wait 10 seconds
11. Notification Service - Wait 10 seconds
12. Event Service

Total startup time: ~3-4 minutes

===============================================
STEP 2: VERIFY SERVICES
===============================================

After all services have started, run the verification script:
verify-all-connections.bat

This will test:
- Gateway availability
- Eureka Server status
- All service endpoints through Gateway
- Direct service availability
- JWT authentication
- Database connections

Expected output: All tests should PASS or show WARN (warnings are ok)

===============================================
STEP 3: CHECK EUREKA DASHBOARD
===============================================

Open browser and go to:
http://localhost:8761

You should see all services registered:
- USERSERVICE
- PRODUCTSERVICE
- CART
- ORDERSERVICE
- SHOPSERVICE
- PAYMENTSERVICE
- CHATSERVICE
- NOTIFICATIONSERVICE
- EVENTSERVICE
- GATEWAY

Status should be "UP" for all services (green)

===============================================
STEP 4: START FRONTEND
===============================================

Open a new terminal/command prompt:
cd frontend
npm install  (first time only)
npm start

Frontend will start on: http://localhost:3000

===============================================
STEP 5: TEST THE APPLICATION
===============================================

1. Open browser: http://localhost:3000

2. Test User Registration:
   - Click "Sign Up"
   - Fill in user details
   - Submit
   - Check for success message

3. Test User Login:
   - Click "Login"
   - Enter credentials
   - Submit
   - Should redirect to home page

4. Test Shop Registration:
   - Click "Become a Seller" or similar
   - Fill in shop details
   - Submit
   - Check for success message

5. Test Product Browsing:
   - Browse products on home page
   - Click on a product for details
   - Products should load from Product Service

6. Test Cart:
   - Add product to cart
   - View cart
   - Update quantities
   - Cart should persist via Cart Service

===============================================
TROUBLESHOOTING
===============================================

Problem: Service won't start
Solution: 
- Check if port is already in use
- Verify Java version (java -version)
- Check MongoDB Atlas connection

Problem: Service not registered in Eureka
Solution:
- Wait 30-60 seconds for registration
- Check service logs for errors
- Verify Eureka Server is running

Problem: Gateway not routing requests
Solution:
- Check Gateway logs
- Verify all services are UP in Eureka
- Check gateway/src/main/resources/application.properties

Problem: JWT authentication errors
Solution:
- Verify JWT_SECRET is same across all services
- Check token expiration
- Clear browser localStorage and re-login

Problem: Database connection errors
Solution:
- Verify MongoDB Atlas credentials
- Check internet connection
- Verify database names in application.properties

Problem: Frontend can't connect
Solution:
- Verify Gateway is running on port 8080
- Check frontend/src/server.js configuration
- Clear browser cache

===============================================
SERVICE PORTS REFERENCE
===============================================

Eureka Server: 8761
Config Server: 8888
API Gateway: 8080 (Frontend connects here)
User Service: 8082
Product Service: 8083
Order Service: 8084
Payment Service: 8085
Notification Service: 8086
Chat Service: 8087
Cart Service: 8088
Shop Service: 8089
Event Service: 8090

Frontend: 3000

===============================================
USEFUL COMMANDS
===============================================

Check if a port is in use (Windows):
netstat -ano | findstr :8080

Kill a process using a port:
taskkill /PID <process_id> /F

Check Java version:
java -version

Check Maven version:
mvn -version

Check Node version:
node -v
npm -v

View service logs:
- Check the command prompt window for each service
- Logs appear in real-time

Stop all services:
- Close all command prompt windows
- Or press Ctrl+C in each window

===============================================
API TESTING WITH CURL OR POSTMAN
===============================================

Base URL: http://localhost:8080/api/v2

Test User Registration:
POST /user/create-user
Content-Type: application/json
Body: {
  "name": "Test User",
  "email": "test@example.com",
  "password": "password123"
}

Test Login:
POST /user/login-user
Content-Type: application/json
Body: {
  "email": "test@example.com",
  "password": "password123"
}

Response will include JWT token - use for authenticated requests:
Authorization: Bearer <token>

Test Protected Endpoint:
GET /user/getuser
Authorization: Bearer <token>

Test Product Listing:
GET /product/get-all-products

Test Cart Operations:
POST /cart/<userId>
Authorization: Bearer <token>

===============================================
DEVELOPMENT WORKFLOW
===============================================

1. Make changes to a service
2. Stop that service (Ctrl+C in its window)
3. Restart the service:
   cd <service-folder>
   mvn clean compile spring-boot:run
4. Service will re-register with Eureka automatically
5. Test your changes

For frontend changes:
- React hot-reloads automatically
- No need to restart

===============================================
PRODUCTION DEPLOYMENT CHECKLIST
===============================================

Before deploying to production:

1. Update MongoDB Atlas IP whitelist
2. Change JWT_SECRET to a strong random value
3. Set REACT_APP_API_BASE to production gateway URL
4. Configure SMTP settings in Notification Service
5. Set up Stripe API keys in Payment Service
6. Enable HTTPS on Gateway
7. Set up proper logging and monitoring
8. Configure firewall rules
9. Set up backup for MongoDB Atlas
10. Review and update CORS configuration

===============================================
SUPPORT AND DOCUMENTATION
===============================================

For detailed information, see:
- MIGRATION_VERIFICATION.txt - Complete migration details
- API_DOCUMENTATION.md - API endpoints documentation
- Individual service README files

For issues:
1. Check service logs
2. Verify Eureka dashboard
3. Run verify-all-connections.bat
4. Check MongoDB Atlas dashboard

===============================================


