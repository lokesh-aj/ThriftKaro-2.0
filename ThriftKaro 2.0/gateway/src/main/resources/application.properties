spring.application.name=gateway
server.port=8080
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# Enable service discovery-based routing
spring.cloud.gateway.server.webflux.discovery.locator.enabled=true
spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true

# CORS (adjust origins as needed)
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allowed-origins=http://localhost:3000
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allowed-headers=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations[/**].allow-credentials=true

# Route definitions
# UserService routes (public auth endpoints bypass JWT)
spring.cloud.gateway.server.webflux.routes[0].id=userservice-auth
spring.cloud.gateway.server.webflux.routes[0].uri=lb://UserService
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/api/v2/user/**

# ProductService
spring.cloud.gateway.server.webflux.routes[1].id=productservice
spring.cloud.gateway.server.webflux.routes[1].uri=lb://ProductService
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/api/v2/product/**
spring.cloud.gateway.server.webflux.routes[1].filters[0]=CircuitBreaker=name=productsCB,fallbackUri=forward:/fallback

# Cart service
spring.cloud.gateway.server.webflux.routes[2].id=cart
spring.cloud.gateway.server.webflux.routes[2].uri=lb://cart
spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/api/v2/cart/**
spring.cloud.gateway.server.webflux.routes[2].filters[0]=CircuitBreaker=name=cartCB,fallbackUri=forward:/fallback

# Order Service
spring.cloud.gateway.server.webflux.routes[3].id=orderservice
spring.cloud.gateway.server.webflux.routes[3].uri=lb://OrderService
spring.cloud.gateway.server.webflux.routes[3].predicates[0]=Path=/api/v2/order/**
spring.cloud.gateway.server.webflux.routes[3].filters[0]=CircuitBreaker=name=orderCB,fallbackUri=forward:/fallback

# Withdraw Service (part of Order Service)
spring.cloud.gateway.server.webflux.routes[4].id=withdrawservice
spring.cloud.gateway.server.webflux.routes[4].uri=lb://OrderService
spring.cloud.gateway.server.webflux.routes[4].predicates[0]=Path=/api/v2/withdraw/**
spring.cloud.gateway.server.webflux.routes[4].filters[0]=CircuitBreaker=name=withdrawCB,fallbackUri=forward:/fallback

# Coupon Service (part of Order Service)
spring.cloud.gateway.server.webflux.routes[5].id=couponservice
spring.cloud.gateway.server.webflux.routes[5].uri=lb://OrderService
spring.cloud.gateway.server.webflux.routes[5].predicates[0]=Path=/api/v2/coupon/**
spring.cloud.gateway.server.webflux.routes[5].filters[0]=CircuitBreaker=name=couponCB,fallbackUri=forward:/fallback

# Chat Service
spring.cloud.gateway.server.webflux.routes[6].id=chatservice
spring.cloud.gateway.server.webflux.routes[6].uri=lb://ChatService
spring.cloud.gateway.server.webflux.routes[6].predicates[0]=Path=/api/v2/conversation/**
spring.cloud.gateway.server.webflux.routes[6].filters[0]=CircuitBreaker=name=chatCB,fallbackUri=forward:/fallback

# Message Service (part of Chat Service)
spring.cloud.gateway.server.webflux.routes[7].id=messageservice
spring.cloud.gateway.server.webflux.routes[7].uri=lb://ChatService
spring.cloud.gateway.server.webflux.routes[7].predicates[0]=Path=/api/v2/message/**
spring.cloud.gateway.server.webflux.routes[7].filters[0]=CircuitBreaker=name=messageCB,fallbackUri=forward:/fallback

# Notification Service
spring.cloud.gateway.server.webflux.routes[8].id=notificationservice
spring.cloud.gateway.server.webflux.routes[8].uri=lb://NotificationService
spring.cloud.gateway.server.webflux.routes[8].predicates[0]=Path=/api/v2/notification/**
spring.cloud.gateway.server.webflux.routes[8].filters[0]=CircuitBreaker=name=notificationCB,fallbackUri=forward:/fallback

# WebSocket Chat Service (native WebSocket upgrade)
spring.cloud.gateway.server.webflux.routes[9].id=websocket-chat
spring.cloud.gateway.server.webflux.routes[9].uri=lb:ws://ChatService
spring.cloud.gateway.server.webflux.routes[9].predicates[0]=Path=/ws/**
spring.cloud.gateway.server.webflux.routes[9].predicates[1]=Header=Upgrade,WebSocket

# Payment Service
spring.cloud.gateway.server.webflux.routes[10].id=paymentservice
spring.cloud.gateway.server.webflux.routes[10].uri=lb://PaymentService
spring.cloud.gateway.server.webflux.routes[10].predicates[0]=Path=/api/v2/payment/**
spring.cloud.gateway.server.webflux.routes[10].filters[0]=CircuitBreaker=name=paymentCB,fallbackUri=forward:/fallback

# Shop Service
spring.cloud.gateway.server.webflux.routes[11].id=shopservice
spring.cloud.gateway.server.webflux.routes[11].uri=lb://ShopService
spring.cloud.gateway.server.webflux.routes[11].predicates[0]=Path=/api/v2/shop/**
spring.cloud.gateway.server.webflux.routes[11].filters[0]=CircuitBreaker=name=shopCB,fallbackUri=forward:/fallback

# Redis rate limiter (use IP as key when no auth)
spring.cloud.gateway.server.webflux.filter.request-rate-limiter.redis.enabled=true
spring.data.redis.host=localhost
spring.data.redis.port=6379

# WebSocket SockJS HTTP fallback (XHR/Streaming transports)
spring.cloud.gateway.server.webflux.routes[12].id=websocket-chat-http
spring.cloud.gateway.server.webflux.routes[12].uri=lb://ChatService
spring.cloud.gateway.server.webflux.routes[12].predicates[0]=Path=/ws/**

# JWT config for Gateway
jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
jwt.allowlist=/api/auth/**,/api/v2/user/**,/api/v2/product/**,/api/v2/cart/**,/api/v2/shop/register,/api/v2/shop/login,/api/v2/payment/stripeapikey,/actuator/**

# Error handling
server.error.include-message=always

# --- Compatibility rewrites for legacy monolith-style User endpoints ---
# Map /api/v2/user/create-user -> /api/auth/register (UserService)
spring.cloud.gateway.server.webflux.routes[13].id=userservice-register
spring.cloud.gateway.server.webflux.routes[13].uri=lb://UserService
spring.cloud.gateway.server.webflux.routes[13].predicates[0]=Path=/api/v2/user/create-user
spring.cloud.gateway.server.webflux.routes[13].filters[0]=SetPath=/api/auth/register

# Map /api/v2/user/login-user -> /api/auth/login (UserService)
spring.cloud.gateway.server.webflux.routes[14].id=userservice-login
spring.cloud.gateway.server.webflux.routes[14].uri=lb://UserService
spring.cloud.gateway.server.webflux.routes[14].predicates[0]=Path=/api/v2/user/login-user
spring.cloud.gateway.server.webflux.routes[14].filters[0]=SetPath=/api/auth/login

# Map /api/v2/user/getuser -> /api/auth/me (UserService)
spring.cloud.gateway.server.webflux.routes[15].id=userservice-me
spring.cloud.gateway.server.webflux.routes[15].uri=lb://UserService
spring.cloud.gateway.server.webflux.routes[15].predicates[0]=Path=/api/v2/user/getuser
spring.cloud.gateway.server.webflux.routes[15].filters[0]=SetPath=/api/auth/me
